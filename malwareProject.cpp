//============================================================================
// Name        : Malware.cpp
// Author      : Stephanie Remy
// Description : MalwareProject in C++, Ansi-style
//============================================================================

#include <iostream>
#include <fstream>
#include <windows.h>
#include <winuser.h>
#include <tgmath.h>
#include <array>
#include <tuple>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc.hpp>
#include <string>
#include <time.h>

using namespace std;
using namespace cv;

std::tuple<bool, bool, float, float, int, int, int, int, float> getMousePosition(bool reverseX, bool reverseY, float x, float y, int centerX, int centerY, int countingX, int countingY, float angle) {
	float radius = 50;
	angle += 0.1;
	x = centerX + cos(angle) * radius;
	y = centerY + sin(angle) * radius;

	if (countingX == 100) {
		if(!reverseX) {
			centerX += 50;
			countingX = 0;
		}
		else if (reverseX) {
			centerX -= 50;
			countingX = 0;
		}
	}
	if (countingY == 100) {
		if(!reverseY) {
			centerY += 50;
			countingY = 0;
		}
		else if (reverseY) {
			centerY -= 50;
			countingY = 0;
		}
	}
	
	if (centerX == 0) reverseX = false;
	else if (centerX >= GetSystemMetrics(SM_CXFULLSCREEN)) reverseX = true;
	
	if (centerY == 0) reverseY = false;
	else if (centerY >= GetSystemMetrics(SM_CYFULLSCREEN)) reverseY = true;

	countingX++;
	countingY++;
	Sleep(.5);
	return std::make_tuple(reverseX, reverseY, x, y, centerX, centerY, countingX, countingY, angle);
}

void drawFinale() {
	//create and display final picture in center of screen
	Mat image2 = imread("Finale.png", cv::IMREAD_COLOR);
	Mat finale;
	cv::resize(image2, finale, cv::Size(), 2, 2);
	imshow("The End", finale);
	cv::moveWindow("The End", 350, 0);
	cv::waitKey(0);
}

void midSong() {
	//create and display final picture in center of screen
	Mat image2 = imread("midProgram.jpg", cv::IMREAD_COLOR);
	Mat mid;
	cv::resize(image2, mid, cv::Size(), 4, 4);
	imshow("Singing", mid);
	cv::moveWindow("Singing", 200, 50);
	cv::waitKey(30);
}

int main() {
	BlockInput(true); //block the keyboard and mouse functions

	//Draw Multiple Pictures and make noise
	Mat image = imread("rickPic.jpg", cv::IMREAD_COLOR);
	for(int i =0; i < 4; i++){
		imshow("Pics" + to_string(i), image);
		cv::moveWindow("Pics" + to_string(i), i * 400, 300);
		cv::waitKey(30);
		imshow("Pics1" + to_string(i), image);
		cv::moveWindow("Pics1" + to_string(i), i * 400, 150);
		cv::waitKey(30);
		imshow("Pics2" + to_string(i), image);
		cv::moveWindow("Pics2" + to_string(i), i * 400, 0);
		cv::waitKey(30);
		PlaySound(TEXT("C:\\Users\\Stephanie\\eclipse-workspace\\HelloWorld\\src\\loud.wav"), NULL, SND_SYNC);		
	}
	
	//Start a song on loop
	PlaySound(TEXT("C:\\Users\\Stephanie\\eclipse-workspace\\HelloWorld\\src\\rick.wav"), NULL, SND_LOOP | SND_ASYNC);

	//get mouse to move around screen variables
	bool reverseX = false, reverseY = false;
	float angle = 0;
	float x = 50 + cos(angle) * 50;
	float y = 50 + sin(angle) * 50;
	int centerX = 50, centerY = 50, countingX = 0, countingY = 0, exit = 1;//exit to get out of program
	std::tuple<bool, bool, float, float, int, int, int, int, float> newMousePosition;
	time_t start = time(0);//figure out when to display mid pic
	bool once = true; //keep track of mid pic to only display once

	//mess with the mouse
	while (exit) {
		SetCursorPos(x, y);
		newMousePosition = getMousePosition(reverseX, reverseY, x, y, centerX, centerY, countingX, countingY, angle);
		reverseX = std::get<0>(newMousePosition);
		reverseY = std::get<1>(newMousePosition);
		x = std::get<2>(newMousePosition);
		y = std::get<3>(newMousePosition);
		centerX = std::get<4>(newMousePosition);
		centerY = std::get<5>(newMousePosition);
		countingX = std::get<6>(newMousePosition);
		countingY = std::get<7>(newMousePosition);
		angle = std::get<8>(newMousePosition);

		//display a picture when Rick starts singing
		if (difftime(time(0), start) == 18 && once) {
			midSong();
			once = false;
		}

		//Failsafe to get out of program
		if (GetAsyncKeyState(VK_CONTROL)) exit = false;
	}
	
	//BlockInput(false); //unblock the keys and mouse
	PlaySound(NULL, NULL, SND_LOOP | SND_ASYNC); // turn off music
	cv::destroyAllWindows();//close all open windows
	Sleep(30);

	drawFinale(); //draw last picture

	return 0;
}
